name: Update Child Repositories

on:
  workflow_dispatch:
    inputs:
      message:
        description: 'Commit message for the update'
        required: true
        default: 'Update from template repository'
      branchName:
        description: 'Branch name in child repositories where changes will be committed'
        required: true
        default: 'update-from-template'
      createPR:
        description: 'Create a pull request in child repositories'
        required: true
        type: boolean
        default: false
      conflictStrategy:
        description: 'How to handle merge conflicts'
        required: true
        type: choice
        options:
          - abort-on-conflicts
          - create-conflict-pr
        default: 'create-conflict-pr'
      dryRun:
        description: 'Perform a dry run without making actual changes'
        required: false
        type: boolean
        default: true
      deleteTempBranch:
        description: 'Delete temporary branch after successful merge to main/master'
        required: false
        type: boolean
        default: true

# Security: Set minimal permissions
permissions:
  contents: read

jobs:
  update-child-repos:
    runs-on: ubuntu-latest
    timeout-minutes: 45 # Increased timeout for large operations
    steps:
      - name: Checkout template repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # Security: Don't persist credentials
          persist-credentials: false

      - name: Validate inputs
        env:
          BRANCH_NAME: ${{ github.event.inputs.branchName }}
          COMMIT_MESSAGE: ${{ github.event.inputs.message }}
        run: |
          # Security: Use environment variables to prevent injection
          if [[ ! "$BRANCH_NAME" =~ ^[a-zA-Z0-9/_-]+$ ]]; then
            echo "Error: Invalid branch name format. Only alphanumeric, underscore, slash, and hyphen allowed."
            exit 1
          fi

          # Validate commit message length and content
          if [[ ${#COMMIT_MESSAGE} -gt 200 ]]; then
            echo "Error: Commit message too long (max 200 characters)"
            exit 1
          fi

          # Security: Validate commit message doesn't contain dangerous characters
          if [[ "$COMMIT_MESSAGE" =~ [\$\`\;] ]]; then
            echo "Error: Commit message contains potentially dangerous characters"
            exit 1
          fi

          # Check if child repositories file exists
          if [[ ! -f ".github/child-repositories.json" ]]; then
            echo "Error: .github/child-repositories.json not found"
            exit 1
          fi

      - name: Set up Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global init.defaultBranch main

      - name: Install GitHub CLI
        run: |
          # Use official installation method
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh

      - name: Read and validate child repositories
        id: read-repos
        run: |
          # Validate JSON structure
          if ! jq empty .github/child-repositories.json 2>/dev/null; then
            echo "Error: Invalid JSON in child-repositories.json"
            exit 1
          fi

          # Check if repositories array exists and is not empty
          REPO_COUNT=$(jq '.repositories | length' .github/child-repositories.json)
          if [[ "$REPO_COUNT" -eq 0 ]]; then
            echo "Error: No repositories found in child-repositories.json"
            exit 1
          fi

          echo "Found $REPO_COUNT repositories to update"
          # Security: Use proper output escaping
          {
            echo "repos<<EOF"
            cat .github/child-repositories.json | jq -c .
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Initialize summary and setup
        env:
          DRY_RUN: ${{ github.event.inputs.dryRun }}
          CONFLICT_STRATEGY: ${{ github.event.inputs.conflictStrategy }}
          CREATE_PR: ${{ github.event.inputs.createPR }}
        run: |
          echo "# 🔄 Astro Template Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Mode:** $(if [[ "$DRY_RUN" == "true" ]]; then echo "🧪 Dry Run"; else echo "🚀 Live Update"; fi)" >> $GITHUB_STEP_SUMMARY
          echo "**Conflict Strategy:** $CONFLICT_STRATEGY" >> $GITHUB_STEP_SUMMARY
          echo "**Create PR:** $CREATE_PR" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          REPO_COUNT=$(echo '${{ steps.read-repos.outputs.repos }}' | jq '.repositories | length')
          echo "## 📋 Repositories Overview" >> $GITHUB_STEP_SUMMARY
          echo "**Total repositories to process:** $REPO_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Process child repositories
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
          COMMIT_MESSAGE: ${{ github.event.inputs.message }}
          BRANCH_NAME: ${{ github.event.inputs.branchName }}
          CREATE_PR: ${{ github.event.inputs.createPR }}
          CONFLICT_STRATEGY: ${{ github.event.inputs.conflictStrategy }}
          DRY_RUN: ${{ github.event.inputs.dryRun }}
          DELETE_TEMP_BRANCH: ${{ github.event.inputs.deleteTempBranch }}
          REPOSITORY_DATA: ${{ steps.read-repos.outputs.repos }}
        run: |
          set -euo pipefail

          if [[ -z "$GITHUB_TOKEN" ]]; then
            echo "Error: PAT_TOKEN secret not configured"
            exit 1
          fi

          TEMP_DIR=$(mktemp -d -t github-actions-XXXXXXXXXX)
          trap 'rm -rf "$TEMP_DIR"' EXIT
          cd "$TEMP_DIR"

          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          RANDOM_SUFFIX=$(openssl rand -hex 4)
          UNIQUE_BRANCH_NAME="${BRANCH_NAME}-${TIMESTAMP}-${RANDOM_SUFFIX}"

          git config --global credential.helper "store --file=$TEMP_DIR/.git-credentials"
          echo "https://x-access-token:${GITHUB_TOKEN}@github.com" > "$TEMP_DIR/.git-credentials"
          chmod 600 "$TEMP_DIR/.git-credentials"

          TEMPLATE_IGNORE_FILE="$GITHUB_WORKSPACE/.templateignore"
          if [[ -f "$TEMPLATE_IGNORE_FILE" ]]; then
            TEMPLATE_IGNORE_LIST=$(grep -v '^\s*#' "$TEMPLATE_IGNORE_FILE" | grep -v '^\s*$' | tr '\n' '|' | sed 's/|$//')
          else
            TEMPLATE_IGNORE_LIST=".github/workflows/update-child-repos.yml|.github/child-repositories.json|.github/workflows/semantic-version.yml"
          fi

          REPOSITORIES=$(echo "$REPOSITORY_DATA" | jq -r '.repositories[]?.url // empty' | grep -v '^$')
          if [[ -z "$REPOSITORIES" ]]; then
            echo "Error: No repository URLs found"
            exit 1
          fi

          TOTAL_REPOS=0
          SUCCESS_COUNT=0
          CONFLICT_COUNT=0
          ERROR_COUNT=0
          NO_CHANGES_COUNT=0
          SUCCESS_REPOS=()
          CONFLICT_REPOS=()
          ERROR_REPOS=()
          NO_CHANGES_REPOS=()

          while IFS= read -r REPO_URL; do
            [[ -z "$REPO_URL" ]] && continue
            TOTAL_REPOS=$((TOTAL_REPOS + 1))

            echo "🔄 Processing Astro repository $TOTAL_REPOS: $(basename "$REPO_URL" .git)"

            if [[ ! "$REPO_URL" =~ ^https://github\.com/[a-zA-Z0-9._-]+/[a-zA-Z0-9._-]+(\.git)?/?$ ]]; then
              echo "❌ Invalid repository URL format: $REPO_URL"
              ERROR_COUNT=$((ERROR_COUNT + 1))
              ERROR_REPOS+=("$REPO_URL")
              continue
            fi

            REPO_URL="${REPO_URL%/}"
            [[ ! "$REPO_URL" =~ \.git$ ]] && REPO_URL="${REPO_URL}.git"
            REPO_NAME=$(basename "$REPO_URL" .git)
            REPO_DIR="$REPO_NAME"
            [[ -d "$REPO_DIR" ]] && rm -rf "$REPO_DIR"

            echo "📥 Cloning repository..."
            REPO_URL_WITH_TOKEN=$(echo "$REPO_URL" | sed -e "s|https://|https://x-access-token:$GITHUB_TOKEN@|")

            if ! git clone "$REPO_URL_WITH_TOKEN" "$REPO_DIR"; then
              echo "❌ Failed to clone repository: $REPO_URL"
              ERROR_COUNT=$((ERROR_COUNT + 1))
              ERROR_REPOS+=("$REPO_NAME")
              continue
            fi

            cd "$REPO_DIR"

            DEFAULT_BRANCH="main"
            if git show-ref --verify --quiet refs/remotes/origin/master; then
              DEFAULT_BRANCH="master"
            fi
            git checkout "$DEFAULT_BRANCH"

            echo "🔗 Adding template remote..."
            TEMPLATE_URL_WITH_TOKEN="https://x-access-token:$GITHUB_TOKEN@github.com/${{ github.repository }}.git"
            git remote add template "$TEMPLATE_URL_WITH_TOKEN" 2>/dev/null || {
              git remote remove template
              git remote add template "$TEMPLATE_URL_WITH_TOKEN"
            }

            echo "📡 Fetching template changes..."
            if ! git fetch template; then
              echo "❌ Failed to fetch template changes"
              cd ..
              ERROR_COUNT=$((ERROR_COUNT + 1))
              ERROR_REPOS+=("$REPO_NAME")
              continue
            fi

            # Check for changes
            TOTAL_FILES=$(git diff --name-only template/main..HEAD | wc -l || echo "0")
            if [[ "$TOTAL_FILES" -eq 0 ]]; then
              echo "ℹ️ Repository $REPO_NAME is already up to date"
              cd ..
              NO_CHANGES_COUNT=$((NO_CHANGES_COUNT + 1))
              NO_CHANGES_REPOS+=("$REPO_NAME")
              continue
            fi

            # Add to summary
            echo "## 📊 $REPO_NAME Changes" >> $GITHUB_STEP_SUMMARY
            echo "**Files changed:** $TOTAL_FILES" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            if [[ "$DRY_RUN" == "true" ]]; then
              echo "🧪 DRY RUN: Would merge template changes"
              cd ..
              SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
              SUCCESS_REPOS+=("$REPO_NAME")
              continue
            fi

            git checkout -b "$UNIQUE_BRANCH_NAME"
            echo "🔀 Merging template changes..."

            if ! git merge template/main --no-edit; then
              echo "⚠️ Merge conflicts detected"
              CONFLICTS=true
              CONFLICT_COUNT=$((CONFLICT_COUNT + 1))
              CONFLICT_REPOS+=("$REPO_NAME")

              if [[ "$CONFLICT_STRATEGY" == "abort-on-conflicts" ]]; then
                git merge --abort
                cd ..
                ERROR_COUNT=$((ERROR_COUNT + 1))
                ERROR_REPOS+=("$REPO_NAME")
                continue
              else
                git add .
                git commit -m "$COMMIT_MESSAGE [CONTAINS CONFLICTS]" || true
              fi
            else
              # Remove template files
              if [[ -n "$TEMPLATE_IGNORE_LIST" ]]; then
                IFS='|' read -ra IGNORE_FILES <<< "$TEMPLATE_IGNORE_LIST"
                for file in "${IGNORE_FILES[@]}"; do
                  [[ -f "$file" ]] && rm -f "$file"
                done
                git add . && git commit -m "Remove template files" --allow-empty
              fi
              SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
              SUCCESS_REPOS+=("$REPO_NAME")
            fi

            if git push -f origin "$UNIQUE_BRANCH_NAME"; then
              echo "✅ Changes pushed successfully"
              if [[ "${CONFLICTS:-false}" == "false" ]]; then
                git checkout "$DEFAULT_BRANCH"
                git merge "$UNIQUE_BRANCH_NAME"
                git push origin "$DEFAULT_BRANCH"
                [[ "$DELETE_TEMP_BRANCH" == "true" ]] && git push origin --delete "$UNIQUE_BRANCH_NAME"
              fi
            else
              echo "❌ Failed to push changes"
              ERROR_COUNT=$((ERROR_COUNT + 1))
              ERROR_REPOS+=("$REPO_NAME")
            fi

            cd ..
          done <<< "$REPOSITORIES"

          # Summary
          echo "## 🎯 Final Results" >> $GITHUB_STEP_SUMMARY
          echo "| Status | Count | Repositories |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|--------------|" >> $GITHUB_STEP_SUMMARY
          [[ ${#SUCCESS_REPOS[@]} -gt 0 ]] && echo "| ✅ Success | $SUCCESS_COUNT | $(IFS=', '; echo "${SUCCESS_REPOS[*]}") |" >> $GITHUB_STEP_SUMMARY
          [[ ${#NO_CHANGES_REPOS[@]} -gt 0 ]] && echo "| ℹ️ No Changes | $NO_CHANGES_COUNT | $(IFS=', '; echo "${NO_CHANGES_REPOS[*]}") |" >> $GITHUB_STEP_SUMMARY
          [[ ${#CONFLICT_REPOS[@]} -gt 0 ]] && echo "| ⚠️ Conflicts | $CONFLICT_COUNT | $(IFS=', '; echo "${CONFLICT_REPOS[*]}") |" >> $GITHUB_STEP_SUMMARY
          [[ ${#ERROR_REPOS[@]} -gt 0 ]] && echo "| ❌ Errors | $ERROR_COUNT | $(IFS=', '; echo "${ERROR_REPOS[*]}") |" >> $GITHUB_STEP_SUMMARY

          echo "Total processed: $TOTAL_REPOS repositories"
          [[ "$ERROR_COUNT" -gt 0 ]] && exit 1 || echo "✅ Update completed successfully"
