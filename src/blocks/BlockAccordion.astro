---
const {
	items,
	Level,
	titleFont,
	titleColor,
	titleSize,
	textFont,
	textColor,
	textSize,
	textAlign,
	borderWidth,
	borderColor,
	metadata,
	headlines,
} = Astro.props;
const h1Font = headlines.h1.font;
const h2Font = headlines.h2.font;
const h3Font = headlines.h3.font;
const h4Font = headlines.h4.font;
const h5Font = headlines.h5.font;
const h6Font = headlines.h6.font;

const {
	h1: { size: h1Size },
	h2: { size: h2Size },
	h3: { size: h3Size },
	h4: { size: h4Size },
	h5: { size: h5Size },
	h6: { size: h6Size },
} = headlines;

---

<div id={metadata?.identifier || undefined} class:list={['blocks', 'blockAccordion', metadata?.classes]}{...metadata?.attributes }>
	{
		Array.isArray(items) && items.length > 0
			? items.map((item) => (
					<div class:list={['service', 'accordion__item', `borderColor--${borderColor}`, 'py-4']}>
						{item.text ? (
							<button
								class:list={['accordion__button', 'flex', 'w-full', 'items-center', 'justify-between', `font--${titleSize}`, `text--${titleColor}`]}
								aria-label="Akkordion öffnen oder schließen"
							>
								<Level set:html={item.title} class:list={['title', 'text-left']} />
								<span class="transition-all duration-300">&#8595;</span>
							</button>
							<div class="accordion__panel max-h-0 max-w-[95%] overflow-hidden transition-all duration-300">
								<div
									set:html={item.text}
									class:list={['text', 'kirby-text', `font--${textSize}`, `text--${textColor}`, `text--${textAlign}`, 'pt-4']}
									data-h1Size={h1Size}
									data-h2Size={h2Size}
									data-h3Size={h3Size}
									data-h4Size={h4Size}
									data-h5Size={h5Size}
									data-h6Size={h6Size}
								/>
							</div>
						) : (
							<div
								class:list={['flex', 'w-full', 'items-center', 'justify-between', `font--${titleSize}`, `text--${titleColor}`]}
							>
								<Level set:html={item.title} class:list={['title']} />
							</div>
						)}
					</div>
			  ))
			: null
	}
</div>


<script>
	// accordion
	const acc = document.querySelectorAll<HTMLElement>('.accordion__button');
	let padding = 150;

	for (const el of acc) {
		el.onclick = function (this: HTMLElement) {
			if (!this.classList.contains('active')) {
				closeAll();
			}

			this.classList.toggle('active');
			let panel = this.nextElementSibling as HTMLElement;

			if (panel?.style.maxHeight) {
				panel.style.maxHeight = '';
			} else {
				panel.style.maxHeight = panel.scrollHeight + padding + 'px';
			}
		};
	}

	function closeAll() {
		for (const el of acc) {
			el.classList.remove('active');
			const nextSibling = el.nextElementSibling;
			if (nextSibling instanceof HTMLElement) {
				nextSibling.style.maxHeight = '';
			}
		}
	}
</script>

<style lang="css" define:vars={{
	titleFont,
	textFont,
	borderWidth,
	h1Font,
	h2Font,
	h3Font,
	h4Font,
	h5Font,
	h6Font, }}>
	.accordion__item {
		@apply border-t-[length:var(--borderWidth)] last:border-b-[length:var(--borderWidth)];
	}

	.title {
		font-family: var(--titleFont);
	}
	.text {
		font-family: var(--textFont);
		.kirby-text {
		p,
		ul,
		ol,
		li,
		.arrow {
			font-family: var(--font);
		}

		ul {
			@apply list-outside pl-[1em];
		}

		h1 {
			font-family: var(--h1Font);
		}

		h2 {
			font-family: var(--h2Font);
		}

		h3 {
			font-family: var(--h3Font);
		}

		h4 {
			font-family: var(--h4Font);
		}

		h5 {
			font-family: var(--h5Font);
		}

		h6 {
			font-family: var(--h6Font);
		}
	}
	}
	.active > span {
		@apply rotate-180;
	}
</style>
