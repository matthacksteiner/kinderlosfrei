---
import { getAltFallback } from '@lib/helpers';

const { image, widthMobile, widthDesktop, noLink, widthAlign } = Astro.props;
const classes = image?.classes;
const link = image?.linkexternal;
const imageProps = {
	src: image?.url,
	alt: image?.alt,
	name: image?.name,
	width: image?.width,
	height: image?.height,
	id: image?.identifier,
	'class:list': [
		`widthMobile--${widthMobile || '100'}`,
		`widthDesktop--${widthDesktop || '100'}`,
		widthAlign === 'start' || widthAlign === 'normal'
			? 'mr-auto'
			: widthAlign === 'center'
			? 'mx-auto'
			: widthAlign === 'end' && 'ml-auto',
		classes,
	].filter(Boolean),
};
// CSS classes for the SVG container
const svgClasses = [
	`widthMobile--${widthMobile || '100'}`,
	`widthDesktop--${widthDesktop || '100'}`,
	widthAlign === 'start' || widthAlign === 'normal'
		? 'mr-auto'
		: widthAlign === 'center'
		? 'mx-auto'
		: widthAlign === 'end' && 'ml-auto',
	classes,
]
	.filter(Boolean)
	.join(' ');
---

{
	() => {
		if (!image) return null;

		// Prepare SVG source for better inline rendering
		const prepareSvgSource = (svgSource) => {
			if (!svgSource) return '';

			// Add viewBox if missing and ensure width/height are set to 100%
			const svgWithViewBox = svgSource.replace(
				/<svg([^>]*)>/i,
				(match, attributes) => {
					let newAttributes = attributes;

					// Extract original width and height if present
					const widthMatch = attributes.match(
						/\bwidth\s*=\s*["']([^"']*)["']/i
					);
					const heightMatch = attributes.match(
						/\bheight\s*=\s*["']([^"']*)["']/i
					);
					const origWidth = widthMatch ? widthMatch[1] : image?.width;
					const origHeight = heightMatch ? heightMatch[1] : image?.height;

					// If no viewBox but has width/height, add viewBox
					if (!attributes.includes('viewBox') && origWidth && origHeight) {
						newAttributes += ` viewBox="0 0 ${origWidth} ${origHeight}"`;
					}

					// Set width and height to 100%
					newAttributes = newAttributes
						.replace(/\bwidth\s*=\s*["'][^"']*["']/i, 'width="100%"')
						.replace(/\bheight\s*=\s*["'][^"']*["']/i, 'height="100%"');

					// If width/height weren't in the original, add them
					if (!widthMatch) newAttributes += ' width="100%"';
					if (!heightMatch) newAttributes += ' height="100%"';

					return `<svg${newAttributes}>`;
				}
			);

			return svgWithViewBox;
		};

		// Function to render inline SVG
		const renderSvg = () => {
			if (image.source) {
				return (
					<div
						class={svgClasses}
						id={image.identifier}
						set:html={prepareSvgSource(image.source)}
						aria-label={image.alt || 'Decorative image'}
						role="img"
					/>
				);
			} else {
				return <img {...imageProps} />;
			}
		};

		// Function to render SVG inside a link
		const renderLinkedSvg = () => {
			if (!link) return renderSvg();

			let href, target, rel;

			switch (link.type) {
				case 'url':
					href = link.href;
					target = link.popup ? '_blank' : undefined;
					rel = link.popup ? 'noopener' : undefined;
					break;

				case 'page':
					href = link.hash ? `${link.uri}#${link.hash}` : `${link.uri}`;
					break;

				case 'file':
					href = image.url;
					target = link.popup ? '_blank' : undefined;
					rel = link.popup ? 'noopener' : undefined;
					break;

				default:
					return renderSvg();
			}

			return (
				<a
					href={href}
					target={target}
					rel={rel}
					aria-label={image.alt || getAltFallback(image.name)}
				>
					{renderSvg()}
				</a>
			);
		};

		if (!image.linktoggle || noLink) {
			return renderSvg();
		} else {
			return renderLinkedSvg();
		}
	}
}

<style lang="css">
	.widthMobile {
		&--auto {
			@apply w-auto;
		}
		&--5 {
			@apply w-[5%];
		}
		&--10 {
			@apply w-[10%];
		}
		&--20 {
			@apply w-1/5;
		}
		&--33 {
			@apply w-1/3;
		}
		&--50 {
			@apply w-1/2;
		}
		&--66 {
			@apply w-2/3;
		}
		&--75 {
			@apply w-3/4;
		}
		&--100 {
			@apply w-full;
		}
	}

	@media (min-width: 768px) {
		.widthDesktop {
			&--auto {
				@apply w-auto;
			}
			&--5 {
				@apply w-[5%];
			}
			&--10 {
				@apply w-[10%];
			}
			&--20 {
				@apply w-1/5;
			}
			&--33 {
				@apply w-1/3;
			}
			&--50 {
				@apply w-1/2;
			}
			&--66 {
				@apply w-2/3;
			}
			&--75 {
				@apply w-3/4;
			}
			&--100 {
				@apply w-full;
			}
		}
	}

	/* Make sure SVGs take up 100% of their container */
	div[role='img'] svg {
		@apply block h-full w-full;
	}

	a {
		@apply w-full;
	}
</style>
